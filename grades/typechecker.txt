=====STUDENT TESTS=====
====Good Tests====
===[good10.bminor Input]===
// ternary and assignment!
x: integer = 9;
f: function void () = {
    x = (x >x || x < x) ? 123 : 456;
    b: boolean = true? false: false;
   }

===[good10.bminor Output]===
Success!

x resolves to global x
x resolves to global x
x resolves to global x
x resolves to global x
x resolves to global x


return code: 0


===[good1.bminor Input]===
// function prototypes and their definitions
f: function void ();
f: function void () = {
    return;
   }
f2: function auto (y: integer) = {
    x: integer = 4;
    return x;

    if (true) {
        return x + 5;
    }

    }
f2: function auto (z: integer);

===[good1.bminor Output]===
Success!

x resolves to local 1
x resolves to local 1
notice: return type of function f2 is integer


return code: 0


===[good2.bminor Input]===
// function auto --> string
str: string = "bye";
f: function auto () = {
    if (false) return "hello";
    else return str;
   }


===[good2.bminor Output]===
Success!

str resolves to global str
notice: return type of function f is string


return code: 0


===[good3.bminor Input]===
// arithmetic tests
x: integer;
y: boolean;
fxn: function integer (a: boolean, z: integer) = {
    z = x + 3 - 4 * z / x;
    z++;
    -z--;
    x = 3^z^x;
    x = z % x + 2;
    return x + z^2;
}

===[good3.bminor Output]===
Success!

z resolves to param 0
x resolves to global x
z resolves to param 0
x resolves to global x
z resolves to param 0
z resolves to param 0
x resolves to global x
z resolves to param 0
x resolves to global x
x resolves to global x
z resolves to param 0
x resolves to global x
x resolves to global x
z resolves to param 0


return code: 0


===[good4.bminor Input]===
// boolean expressions
fxn: function boolean () = {
    bool1: boolean = true;
    bool2: boolean;
    bool2 = bool1 && false || true || !false;
    return bool1 || bool2; 
}

===[good4.bminor Output]===
Success!

bool2 resolves to local 2
bool1 resolves to local 1
bool1 resolves to local 1
bool2 resolves to local 2


return code: 0


===[good5.bminor Input]===
//multidimensional arrays
arr: array[1] array[3] array[2] integer = {{{1,2},{3,4}, {5,6}}};
arr2: array[2] integer;
fxn: function boolean () = {
    arr2 = arr[0][1];
    return true;     
}

===[good5.bminor Output]===
Success!

arr2 resolves to global arr2
arr resolves to global arr
2 2 2 2

2 2 2 2

1 1 1 1

3 3 0 3

2 2 0 2

indexing 1
indexing 3


return code: 0


===[good6.bminor Input]===
// testing auto in arrays
arr: array [4] auto = {{1,2}, {3,4}, {5,6}, {7,8}};

arr2: array [4] array[2] auto = {{1,2}, {5,6}, {5,6}, {7,8}};
fxn: function void () = {
    a: integer = arr[0][1];    
    b: integer = arr2[0][arr[1][0]];
}


===[good6.bminor Output]===
Success!

arr resolves to global arr
arr2 resolves to global arr2
arr resolves to global arr
2 2 2 2

2 2 2 2

2 2 2 2

notice: type of array auto is now array[2] integer
4 4 4 4

2 2 2 2

2 2 2 2

2 2 2 2

2 2 2 2

4 4 4 4

notice: type of array auto is now integer
2 2 0 2

indexing 4
indexing 2
indexing 4
indexing 4
indexing 2
indexing 2


return code: 0


===[good7.bminor Input]===
// arrays and changing an element, indexing
a: array[2] auto = {{'c', 'a', 'c'}, {'b', 'd', 'd'}};
f: function void () = {
    a[2][2] = 't';
   }

===[good7.bminor Output]===
Success!

a resolves to global a
3 3 3 3

notice: type of array auto is now array[3] char
2 2 2 2

3 3 3 3

indexing 2
indexing 3


return code: 0


===[good8.bminor Input]===
// for loops, if statements, print statements
f: function integer () ={
    i: integer = 0;
       for (i; i < 5; i++) {
            print i, i*i, f();
       }
       if (3 != 4 + i) {
            print "sad";
       } else {
            print "oof";
       }
    return 3;
}

===[good8.bminor Output]===
Success!

i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
f resolves to global f
i resolves to local 1


return code: 0


===[good9.bminor Input]===
// comparisons and such
a: integer = 1;
b: integer = 2;
c: boolean = false;
s: string = "hello";
str: string = "ohno";
f: function boolean () = {
    return (a> b) && (a < b) || (a <= b);
    return true;
    return (a>= b) && (a != b) || (a == b);
    return (s==str) || (s!=str);
   }

===[good9.bminor Output]===
Success!

a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
s resolves to global s
str resolves to global str
s resolves to global s
str resolves to global str


return code: 0


====Bad Tests====
===[bad10.bminor Input]===
// bad ternary operator
func: function boolean () = {
    x: integer = 0;
    y: boolean = true ? x : -x;
    return y;
      }

===[bad10.bminor Output]===
Success!

x resolves to local 1
x resolves to local 1
y resolves to local 2
type error: cannot declare a type boolean to be an integer (true?x:-x)


return code: 1


===[bad11.bminor Input]===
f: function auto () = {
    if (true) return 10;
    else return;
   }

===[bad11.bminor Output]===
Success!

notice: return type of function f is integer
type error: function return type (integer) requires a non-void return type.


return code: 1


===[bad1.bminor Input]===
// function redefined with different parameters
f1: function auto (a: boolean) = {
    return 5;
}
f2: function integer (); 
f1: function integer (a: boolean);

===[bad1.bminor Output]===
Success!

f1 is already defined with a different return type of auto
resolve failed.


return code: 1


===[bad2.bminor Input]===
// array not consistent
arr: array[1] array[3] array[2] integer = {{{1,2},{3,4}, {5,'c'}}};

fxn: function boolean () = {
    arr = {{{1,2}, {3, 4}, {5,6}}};
    return true;     
}

===[bad2.bminor Output]===
Success!

arr resolves to global arr
type error: array elements must be of the same type: an integer (5) and a char ('c')
2 2 2 2

type error: array elements must be of the same type: an integer (5) and a char ('c')
2 2 2 2

1 1 1 1

3 3 0 3

2 2 0 2

2 2 2 2

2 2 2 2

3 3 0 3

2 2 0 2



return code: 1


===[bad3.bminor Input]===
// declare non-literal in global scope
x: integer = 3;
y: integer = x;

===[bad3.bminor Output]===
Success!

x resolves to global x
type error: cannot declare non-literal value an integer (x) in global scope


return code: 1


===[bad4.bminor Input]===
// function call and mismatched types
main: function integer (b: boolean) = {
        return 0;
      }

f: function boolean (b: boolean) = {
    return main(true);
   }

===[bad4.bminor Output]===
Success!

main resolves to global main
type error: return type  an integer (main(true)) does not match the function return type boolean


return code: 1


===[bad5.bminor Input]===
// auto as parameter
arr: array [4] auto = {{1,2}, {3,4}, {5,6}, {7,8}};

arr2: array [4] array[2] auto = {{1,2}, {5,6}, {5,6}, {7,8}};
fxn: function void () = {
    a: integer = arr[0][1];    
    a: integer = arr2[0][arr[1][0]];
     }

f: function void (x: auto);

===[bad5.bminor Output]===
Success!

arr resolves to global arr
arr2 resolves to global arr2
arr resolves to global arr
a is already defined
resolve failed.


return code: 1


===[bad6.bminor Input]===
// function inconsistent return types - void and boolean
fxn: function void () ={
    
    return true;
     }


===[bad6.bminor Output]===
Success!

type error: function return type void cannot return type  a boolean (true)


return code: 1


===[bad7.bminor Input]===
// function no return statement
f: function auto (x: integer) = {
    x = x + x;
    x = (x > 4) ? x : x+2;
   }

===[bad7.bminor Output]===
Success!

x resolves to param 0
x resolves to param 0
x resolves to param 0
x resolves to param 0
x resolves to param 0
x resolves to param 0
x resolves to param 0
type error: no return statement for a non-void function


return code: 1


===[bad8.bminor Input]===
// if statements without boolean in the condition
f: function boolean (x: string) = {
    if (x) return true;
    else if (!x) return false;

}

===[bad8.bminor Output]===
Success!

x resolves to param 0
x resolves to param 0
type error:  a string (x)is not allowed in if condition. Should be a boolean value.
type error: cannot NOT a string (x)


return code: 1


===[bad9.bminor Input]===
// comparisons of different types
function1: function void () = {
    x: integer = 10;
    y: boolean = false;
    print x != y || (3 == "string");
           }

===[bad9.bminor Output]===
Success!

x resolves to local 1
y resolves to local 2
type error: cannot compare an integer (x)to a boolean (y)
type error: cannot compare an integer (3)to a string ("string")


return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/*
Correct: The parameter name can vary as long as the type is the same.
*/

x: function integer(a:integer);

x: function integer(b:integer) = {
	return 0;
}

x: function integer(c:integer);

===[good1.bminor Output]===
Success!



return code: 0


===[good10.bminor Input]===
/*
Correct: Testing invocation of external function.
*/

abs: function integer(n: integer);

digits: array [6] integer = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: integer = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[good10.bminor Output]===
TEST NOT PASSED

digits resolves to global digits
abs resolves to global abs
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
i resolves to local 1
i resolves to local 1
6 6 6 6

indexing 6
indexing 6
type error: param_list type integer does not match type array[6] integer
indexing 6
indexing 6


return code: 1


===[good2.bminor Input]===
/*
Correct: Test various nested definitions.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	print x;
}

===[good2.bminor Output]===
Success!

x resolves to local 1
x resolves to local 1
x resolves to local 1
x resolves to local 1


return code: 0


===[good3.bminor Input]===
/*
Correct: Test various function return types.
*/

A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	i: integer;
	for (i = 0; i < 10; i++)
		if (i % 2 == 0)
			print i;
		else
			return i;

	if (A(B('d') - 1, 10)) {
		x: integer = 0;
		return 2 * B('c') + x;
	}

	return B(C("hello")) % 3;
}

===[good3.bminor Output]===
TEST NOT PASSED

i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
A resolves to global A
B resolves to global B
B resolves to global B
x resolves to local 1
B resolves to global B
C resolves to global C
type error: param_list type char does not match type function char(a:string)


return code: 1


===[good4.bminor Input]===
/*
Correct: Test combinations of boolean operators.
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -b;
	print c && d;
	print a + b * a - a ^ b /a;

	print a < b && d;
	print (a < b) || (c && d);
}

===[good4.bminor Output]===
Success!

a resolves to param 0
b resolves to param 0
c resolves to param 0
d resolves to param 0
a resolves to param 0
b resolves to param 0
a resolves to param 0
a resolves to param 0
b resolves to param 0
a resolves to param 0
a resolves to param 0
b resolves to param 0
d resolves to param 0
a resolves to param 0
b resolves to param 0
c resolves to param 0
d resolves to param 0


return code: 0


===[good5.bminor Input]===
/*
Correct: Test array assignments.
*/

x:array [5] integer = {1,2,3,4,5};
y:array [5] array [5] integer;

main:function void () =
{
	y[1] = x;
	count:integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[good5.bminor Output]===
Success!

y resolves to global y
x resolves to global x
count resolves to local 1
count resolves to local 1
count resolves to local 1
y resolves to global y
count resolves to local 1
x resolves to global x
5 5 5 5

indexing 5
indexing 5


return code: 0


===[good6.bminor Input]===
/*
Correct: Test assignment of array literals.
*/

main: function void (a: integer) = {
	x: array [1] boolean = {true};
	y: array [1] integer = {0};
	if (x[y[a]]) return;
}

===[good6.bminor Output]===
Success!

x resolves to local 1
y resolves to local 2
a resolves to param 0
type error: cannot declare array (x) in local scope
1 1 1 1

type error: cannot declare array (y) in local scope
1 1 1 1

indexing 1
indexing 1


return code: 0


===[good7.bminor Input]===
/*
Correct: Test if-expression and return-expression.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	if (!n) return 0; else return -m;

	print 10 * (-1 + m);
}

===[good7.bminor Output]===
Success!

n resolves to local 2
m resolves to local 1
m resolves to local 1


return code: 0


===[good8.bminor Input]===
/*
Correct: Boolean expression in several places.
*/

x: function integer(a:boolean) = {
	if (a) for (;a;) print a;
}

===[good8.bminor Output]===
TEST NOT PASSED

a resolves to param 0
a resolves to param 0
a resolves to param 0
type error: no return statement for a non-void function


return code: 1


===[good9.bminor Input]===
/*
Correct: A program to plot a quadratic function. 
*/

/* Make use of atoi from the standard library */

atoi: function integer( s: string );

quadratic: function integer ( a: integer, b: integer, c: integer, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[good9.bminor Output]===
TEST NOT PASSED



return code: -11


===[good11.bminor Input]===
/*
Correct: Test ternary operator
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {
        
    print a < b ? c : d;
}
===[good11.bminor Output]===
Success!

a resolves to param 0
b resolves to param 0
c resolves to param 0
d resolves to param 0


return code: 0


===[good12.bminor Input]===
/*
Correct: Auto can correctly be used to infer types
*/

main: function integer() = {
	m: auto = 3;
	n: auto = 5;
    
    x: auto = m + n;

    print x;
}

===[good12.bminor Output]===
TEST NOT PASSED

m resolves to local 1
n resolves to local 2
x resolves to local 3
type error: cannot declare a type auto to be an integer (3)
type error: cannot declare a type auto to be an integer (5)
type error: cannot add an auto (m)to an auto (n)
type error: cannot declare a type auto to be an integer (m+n)
type error: no return statement for a non-void function


return code: 1


====Bad Tests====
===[bad1.bminor Input]===
/*
Incorrect: Mismatched types in forward declaration
*/

x: function integer(a:char);
x: function integer(a:integer) = {
	return 0;
}

===[bad1.bminor Output]===
Success!

x is already defined, conflicting param types
resolve failed.


return code: 1


===[bad10.bminor Input]===
/*
Incorrect: Several type errors throughout.
*/

abs: function string (n: integer);

digits: array [6] char = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: boolean = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[bad10.bminor Output]===
Success!

digits resolves to global digits
abs resolves to global abs
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
i resolves to local 1
i resolves to local 1
6 6 6 6

type error: cannot declare a type array[6] char to be an array[6] integer ({14,8,6168,42,0,74546})
indexing 6
type error: cannot assign an integer (-468) to a char (digits[4])
type error: cannot declare a type boolean to be an integer (0)
type error: indexing a boolean (i) is not an integer
indexing 6
type error: param_list type integer does not match type array[6] char
type error: indexing a boolean (i) is not an integer
indexing 6
type error: cannot compare a string (abs(digits[i]))to a char (digits[i])
type error: indexing a boolean (i) is not an integer
indexing 6
type error: cannot add a boolean (i)to an integer (1)
type error: cannot assign an integer (i+1) to a boolean (i)


return code: 1


===[bad2.bminor Input]===
/*
Incorrect: Variable redefined within a scope.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	x: integer = 2;
	print x;
}

===[bad2.bminor Output]===
Success!

x resolves to local 1
x resolves to local 1
x resolves to local 1
x is already defined
x resolves to local 1
resolve failed.


return code: 1


===[bad3.bminor Input]===
/*
Incorrect: Mismatched function return types.
*/

main: function void() = {
	return i;
}

func: function integer() = {
	return;
}

===[bad3.bminor Output]===
Success!

resolve error: i is not declared
resolve failed.


return code: 1


===[bad4.bminor Input]===
/*
Incorrect: Mismatched operators.
*/


func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -c;
	print c * d;
	print a + b * a - a ^ b /d;

	print a < b && a;
	print (a < b) + (c && d);
}

===[bad4.bminor Output]===
Success!

a resolves to param 0
c resolves to param 0
c resolves to param 0
d resolves to param 0
a resolves to param 0
b resolves to param 0
a resolves to param 0
a resolves to param 0
b resolves to param 0
d resolves to param 0
a resolves to param 0
b resolves to param 0
a resolves to param 0
a resolves to param 0
b resolves to param 0
c resolves to param 0
d resolves to param 0
type error: cannot subtract an integer (a)by a boolean (c)
type error: cannot multiply a boolean (c)by a a boolean (d)
type error: cannot divide an integer (a^b)by a boolean (d)
type error: cannot AND a boolean (a<b)and an integer (a)
type error: cannot add a boolean (a<b)to a boolean (c&&d)


return code: 1


===[bad6.bminor Input]===
/*
Incorrect: Cannot assign an array to an atomic type.
*/

main: function void () = {
	// array of one boolean != boolean
	x: array [1] boolean = {true};
	if (x) return;
}

===[bad6.bminor Output]===
Success!

x resolves to local 1
type error: cannot declare array (x) in local scope
1 1 1 1

type error:  an array[1] boolean (x)is not allowed in if condition. Should be a boolean value.


return code: 1


===[bad7.bminor Input]===
/*
Incorrect: Improper operators on values.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	// wrong negation
	if (-n) return 0; else return !m;

	// arithmetic on boolean
	print 10 * (-1 + n);
}

===[bad7.bminor Output]===
Success!

n resolves to local 2
m resolves to local 1
n resolves to local 2
type error: cannot negate a boolean (n)
type error:  an integer (-n)is not allowed in if condition. Should be a boolean value.
type error: cannot NOT an integer (m)
type error: return type  a boolean (!m) does not match the function return type integer
type error: cannot add an integer (-1)to a boolean (n)


return code: 1


===[bad8.bminor Input]===
/*
Incorrect: Cannot use an integer in place of a boolean.
*/

x: function integer(a:integer) = {
	if (a) return 10;
	for (;a;) print a;
}

===[bad8.bminor Output]===
Success!

a resolves to param 0
a resolves to param 0
a resolves to param 0
type error:  an integer (a)is not allowed in if condition. Should be a boolean value.


return code: 1


===[bad9.bminor Input]===
/*
Incorrect: Several type mismatches throughout.
*/

/* Make use of atoi from the standard library */

atoi: function boolean ( s: string );

quadratic: function void ( a: char, b: string, c: boolean, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[bad9.bminor Output]===
Success!



return code: -11


===[bad11.bminor Input]===
/*
Incorrect: An auto must eventually be assigned to something
*/

main: function integer() = {
	m: auto;
	n: auto = 5;
    
    // The m has not been set yet
    x: auto = m + n;

    print x;
}

===[bad11.bminor Output]===
Success!

m resolves to local 1
n resolves to local 2
x resolves to local 3
type error: cannot declare a type auto to be an integer (5)
type error: cannot add an auto (m)to an auto (n)
type error: cannot declare a type auto to be an integer (m+n)
type error: no return statement for a non-void function


return code: 1


===[bad5.bminor Input]===
/*
Incorrect: Cannot subscript a value which is not an array.
*/

main: function void() = {
	s : boolean = false;
	c : char = s[1];
	print c;
}

===[bad5.bminor Output]===
Success!

s resolves to local 1
c resolves to local 2
type error: cannot index a variable of type boolean
type error: cannot declare a type char to be a boolean (s[1])


return code: 1


=====COMMON TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* Assign integer expression to local variable/ typechecking with function call. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x: integer = y * 10 + 15 - 4;
}
	


===[good1.bminor Output]===
Success!

y resolves to global y


return code: 0


===[good10.bminor Input]===
/* Test array of array assignments. */

x: array [5] integer = {1,2,3,4,5};
y: array [5] array [5] integer;

main: function void () =
{
	y[1] = x;
	count: integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[good10.bminor Output]===
Success!

y resolves to global y
x resolves to global x
count resolves to local 1
count resolves to local 1
count resolves to local 1
y resolves to global y
count resolves to local 1
x resolves to global x
5 5 5 5

indexing 5
indexing 5


return code: 0


===[good2.bminor Input]===
/* Assign an integer expression to local variable. */

x: integer = 5;
y: integer = 10;

test: function integer();

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function integer () =
{
	return 5;
}
	


===[good2.bminor Output]===
Success!

y resolves to global y
test resolves to global test


return code: 0


===[good3.bminor Input]===
/* Test name resolution at multiple scope levels. */

x: integer = 5;
y: integer = 10;

main: function void () =
{
	x: integer = 5;
	y: integer = 10;
	{
		x: integer = 5;
		y: integer = 10;
		{
			x: char = 'a';
			y: integer = 10;
		}
		y = x + y;
	}
}
	


===[good3.bminor Output]===
Success!

y resolves to local 2
x resolves to local 1
y resolves to local 2


return code: 0


===[good4.bminor Input]===
/* Use character types in various contexts. */

charFxn: function char(x: char)=
{
	if(x == 'a')
	{
		return 'z';
	}
}

main: function void ()=
{
	c: char;

	if('a' == charFxn('c'))
	{
		print "unreachable";
	}
	if('a' != 'a')
	{
		print "unreachable";
	}
	if(c == 'a')
	{
		print "unreachable";
	}
}


===[good4.bminor Output]===
Success!

x resolves to param 0
charFxn resolves to global charFxn
c resolves to local 1


return code: 0


===[good5.bminor Input]===
// Test integer comparisons and functions. */

intFxn: function integer(c:char);

glob: integer = 1;

main: function void ()=
{
	c: integer;
	if(6 == intFxn('c'))
	{
		print "unreachable";
	}
	if(5 >= 5)
	{
		print "unreachable";
	}
	if(c > 5)
	{
		print "unreachable";
	}
	if(c >= 5)
	{
		print "unreachable";
	}
	if(intFxn('a') <= 5)
	{
		print "reachable";
	}
	if(glob < 5)
	{
		print "reachable";
	}
}

intFxn: function integer(c: char)=
{
	if(c == 'a')
	{
		return 5;
	}
	return 0;
}


===[good5.bminor Output]===
Success!

intFxn resolves to global intFxn
c resolves to local 1
c resolves to local 1
intFxn resolves to global intFxn
glob resolves to global glob
c resolves to param 0


return code: 0


===[good6.bminor Input]===
/* Test function declarations without prototypes. */

test1: function integer (a:integer, b:integer)=
{
	return a + b;
}

test2: function boolean (a:integer, b:integer)=
{
	return a < b;
}

test3: function char (a:integer)=
{
	if (a > 5) {
		return 'x';
	} else {
		return 'y';
	}
}

main:function void ()=
{
	print test1(10,20), test2(30,40), test3(10), "\n";
}


===[good6.bminor Output]===
Success!

a resolves to param 0
b resolves to param 0
a resolves to param 0
b resolves to param 0
a resolves to param 0
test1 resolves to global test1
test2 resolves to global test2
test3 resolves to global test3


return code: 0


===[good7.bminor Input]===
/* Test function invocations with prototypes. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);
test3:function string (a:integer);

main:function void ()=
{
	x:integer = test1(5, 6);
	test2(5, 6);
	print test3(7);
}

test1:function integer (a:integer, b:integer)=
{
	return a + b;
}

test2:function boolean (a:integer, b:integer)=
{
	return a==b;
}

test3:function string (a:integer)=
{
	if (test1(1, 5) > 6)
	{
		return "hello world";
	}
}

===[good7.bminor Output]===
Success!

test1 resolves to global test1
test2 resolves to global test2
test3 resolves to global test3
a resolves to param 0
b resolves to param 0
a resolves to param 0
b resolves to param 0
test1 resolves to global test1


return code: 0


===[good8.bminor Input]===
/* Update one element of an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x[4] = 4;
}

===[good8.bminor Output]===
Success!

x resolves to global x
5 5 5 5

indexing 5


return code: 0


===[good9.bminor Input]===
/* Update array with values from function calls. */

x: array [5] integer = {1,2,3,4,5};
intFxn: function integer ();

main: function void () =
{
	x[4] = intFxn();
	x[intFxn()] = 4;
	
}
intFxn: function integer () =
{
	return 3;
}

===[good9.bminor Output]===
Success!

x resolves to global x
intFxn resolves to global intFxn
x resolves to global x
intFxn resolves to global intFxn
5 5 5 5

indexing 5
indexing 5


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* Cannot assign a character to a global integer. */

x: integer = 'c';


===[bad1.bminor Output]===
Success!

type error: cannot declare a type integer to be a char ('c')


return code: 1


===[bad10.bminor Input]===
/* Cannot assign an array-of-arrays to an array. */

x:array [5] integer;
y:array [5] array [5] integer;

main:function void () =
{
	y = x;
}

===[bad10.bminor Output]===
Success!

y resolves to global y
x resolves to global x
type error: array type array[5] integer does not match the element of type integer


return code: 1


===[bad2.bminor Input]===
/* Cannot use a function without declaring it. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function char () =
{
	return 'a';
}
	


===[bad2.bminor Output]===
Success!

y resolves to global y
resolve error: test is not declared
resolve failed.


return code: 1


===[bad3.bminor Input]===
/* Cannot use a variable x that is not defined in the current scope. */

y: integer = 10;

main: function void ()=
{
	y: integer = 10;
	{
		
		y: integer = 10;
		{
			
			x: integer = 5;
			y: integer = 10;
		}
		y = x + y;
	}
}
	


===[bad3.bminor Output]===
Success!

y resolves to local 1
resolve error: x is not declared
y resolves to local 1
resolve failed.


return code: 1


===[bad4.bminor Input]===
/* Type of return statement must match return type of function. */

main: function integer ()=
{
	return 'c';
}

===[bad4.bminor Output]===
Success!

type error: return type  a char ('c') does not match the function return type integer


return code: 1


===[bad5.bminor Input]===
/* Check for invalid type inside of boolean expression. */

y:integer = 10;

main: function void () =
{
	if(y > 5 && 'a' || true)
	{
		print "ok";
	}
}
	


===[bad5.bminor Output]===
Success!

y resolves to global y
type error: cannot AND a boolean (y>5)and a char ('a')


return code: 1


===[bad6.bminor Input]===
/* Function definitions must match prior prototypes. */

test1: function integer (a:integer, b:integer);
test2: function boolean (a:integer, b:integer);
test3: function string (a:integer);

main: function void () =
{
	str: string = "hi";
}

/* Parameter type differs from prototype. */

test3: function string (a:boolean) =
{
	return "hello!";
}

/* Return type differs from prototype. */

test2: function integer (a:integer, b:integer) =
{ 
	return a + b;
}


===[bad6.bminor Output]===
Success!

test3 is already defined, conflicting param types
test2 is already defined with a different return type of boolean
a resolves to param 0
b resolves to param 0
resolve failed.


return code: 1


===[bad7.bminor Input]===
/* Function arguments must match formal parameter types. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);

main: function void () =
{
	x:integer = test2(5, 6);
	test2(5,6);
	print test2(11);
}

test2: function boolean (a:integer, b:integer) =
{
	return a==b;
}

===[bad7.bminor Output]===
Success!

test2 resolves to global test2
test2 resolves to global test2
test2 resolves to global test2
a resolves to param 0
b resolves to param 0
type error: cannot declare a type integer to be a boolean (test2(5,6))


return code: 1


===[bad8.bminor Input]===
/* Cannot assign a scalar value to an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x = 4;
}

===[bad8.bminor Output]===
Success!

x resolves to global x
5 5 5 5

type error: array cannot be assigned to type integer


return code: 1


===[bad9.bminor Input]===
/* Cannot index an array with a boolean. */

x:array [5] integer = {1,2,3,4,5};

main: function void () =
{
	x[true] = intFxn();
}

intFxn: function integer ()=
{
	return 3;
}

===[bad9.bminor Output]===
Success!

x resolves to global x
resolve error: intFxn is not declared
resolve failed.


return code: 1


===== SUMMARIZED TYPECHECKER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 11,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 7,
      "incorrect": 5
    },
    "Bad": {
      "correct": 11,
      "incorrect": 0
    }
  },
  "common_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  }
}
